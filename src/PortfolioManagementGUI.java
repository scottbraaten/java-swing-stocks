import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.event.ListDataListener;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Scott Braaten
 */

/**************************************************** 
Program Name: PortfolioManagementGUI.java 
Programmer's Name: Scott Braaten
Program Description: Provides user with way of tracking stocks - adding
* them and then seeing the profit/loss they accumulated.
***********************************************************/

public class PortfolioManagementGUI extends javax.swing.JFrame {
    private DefaultListModel<Stock> stockModel;
    
    /**
     * Creates new form PortfolioManagementGUI
     */
    public PortfolioManagementGUI() {
        // initialize before initComponents
        stockModel = new DefaultListModel<Stock>();
        
        initComponents();
        
        // set properties for components JList and JButton
        listStocks.setModel(stockModel);
        btnRemove.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        tbpManage = new javax.swing.JTabbedPane();
        pnlList = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listStocks = new javax.swing.JList<>();
        txtStockInfo = new javax.swing.JLabel();
        btnRemove = new javax.swing.JButton();
        pnlAdd = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblQty = new javax.swing.JLabel();
        lblPurchase = new javax.swing.JLabel();
        lblCurrent = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtQty = new javax.swing.JTextField();
        txtPurchase = new javax.swing.JTextField();
        txtCurrent = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();

        jMenuItem1.setText("jMenuItem1");

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Portfolio Management");

        listStocks.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                itemSelectedHandler(evt);
            }
        });
        jScrollPane1.setViewportView(listStocks);

        btnRemove.setText("Remove stock");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlListLayout = new javax.swing.GroupLayout(pnlList);
        pnlList.setLayout(pnlListLayout);
        pnlListLayout.setHorizontalGroup(
            pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
            .addGroup(pnlListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtStockInfo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlListLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRemove)
                .addGap(115, 115, 115))
        );
        pnlListLayout.setVerticalGroup(
            pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtStockInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(btnRemove)
                .addGap(24, 24, 24))
        );

        tbpManage.addTab("List", pnlList);

        lblName.setText("Stock name");

        lblQty.setText("Quantity");

        lblPurchase.setText("Purchase price");

        lblCurrent.setText("Current price");

        btnAdd.setText("Add Stock");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAddLayout = new javax.swing.GroupLayout(pnlAdd);
        pnlAdd.setLayout(pnlAddLayout);
        pnlAddLayout.setHorizontalGroup(
            pnlAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAddLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName)
                    .addComponent(lblQty)
                    .addComponent(lblPurchase)
                    .addComponent(lblCurrent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                .addGroup(pnlAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                    .addComponent(txtName)
                    .addComponent(txtQty)
                    .addComponent(txtPurchase)
                    .addComponent(txtCurrent, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlAddLayout.setVerticalGroup(
            pnlAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQty)
                    .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPurchase)
                    .addComponent(txtPurchase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCurrent)
                    .addComponent(txtCurrent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(btnAdd)
                .addContainerGap())
        );

        tbpManage.addTab("Add Stock", pnlAdd);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbpManage)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbpManage)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // declare variables for inputs
        String stockName = txtName.getText();
        String inputQty = txtQty.getText();
        String inputPurchase = txtPurchase.getText();
        String inputCurrent = txtCurrent.getText();
        
        double stockQty;
        double stockPurchase;
        double stockCurrent;
        
        // validate qty, purchasing price, and current price
        
        try {
            stockQty = Double.parseDouble(inputQty);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error:\nEnter a valid number for stock quantity.");
            return;
        }
        
        try {
            stockPurchase = Double.parseDouble(inputPurchase);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error:\nEnter a valid number for purchasing price.");
            return;
        }
        
        try {
            stockCurrent = Double.parseDouble(inputCurrent);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error:\nEnter a valid number for current price.");
            return;
        }
        
        // validate stockName
        
        /* 
        The following is a somewhat roundabout way of accomplishing the
        stockName validation. Instead of using a custom for loop,
        I wanted to use a built in filter method to find the name
        of a previous stock so that the program would prevent the 
        redundant addition of a stock.
        
        I searched for what Object had such a filter method and found
        that the List<T> object does. I then tried to convert the
        DefaultListModel<Stock> into a List<Stock> and had many 
        different difficulties.
        
        List<Stock> stockList = Arrays.asList(stockModel.toArray()) and
        List<Stock> stockList = Arrays.asList((Stock[]) stockModel.toArray()) and
        List<Stock> stockList = (List<Stock>) Arrays.asList(stockModel.toArray())
        doesn't work because stockModel.toArray() returns a
        Object[], and even if that is casted to a Stock[] (which is possible),
        Arrays.asList(...) returns a List<Object>, even when the array passed as
        a parameter is specified as a Stock[]. And then the attempted casting
        to a (List<Stock>) doesn't work.
        
        After much troubleshooting, I realized that all that needed to be done
        was to use the Stream object which could be called with the
        DefaultListModel<Stock> converted to an Object[] as a parameter. With
        the Stream, accessing each Object in the stream is simple with built in methods.
        With this, each Object can be cast to Stock and then filtered.
        
        This is how it's done:
        
         - Converts DefaultListModel<Stock> stockModel to a matching Object[]
           - Does this with toArray()
         - Uses Arrays.stream to initialize a Stream<Object> from this Object[]
           - This is done in order to effectively traverse through the Object[]
         - Uses map method to apply an adjustment to each element in the Object[]
         - The adjustment applied is a cast via the method reference operator (::)
           - The Stock class is stated and then the built in cast method is referenced
           - Therefore, each object referenced in the Object[] is casted to type Stock
           - Note that the filtering can't be done at this point - the objects have to
             be cast to the Stock class first.
         - Now the mapped stream can be filtered through with the filter method
           - The filter compares the input name with the name property of each Stock
           - A lambda expression is used here (->) - this serves as an anonymous function.
         - The method findAny is used to return the first Stock that matches the comparison operator
         - The method orElse is used to return the specified value null if no matches are found
        
        With this, the DefaultListModel<Stock> is traversed through to find any other
        Stock that has the same name as the input name.
        */
        Stock potential = Arrays.stream(stockModel.toArray())
                .map(Stock.class::cast)
                .filter(stock -> stockName.equals(stock.getName()))
                .findAny()
                .orElse(null);
        
        // if an element is found with the same name, throw error message and return.
        if (potential != null) {
            // consider giving option to update the qty, purchase price, or current price
            JOptionPane.showMessageDialog(this, "This stock has already been entered.");
            return;
        }
        
        // validate stockQty
//        if (stockQty)

        // Instantiate new Stock and add to stockModel
        Stock stock = new Stock(stockName, stockQty, stockPurchase, stockCurrent);
        stockModel.addElement(stock);
        
        // reset textFields
        txtName.setText("");
        txtQty.setText("");
        txtPurchase.setText("");
        txtCurrent.setText("");
        
        // set btnRemove visibility to true now that there are stocks
        if (!btnRemove.isVisible()) {
            btnRemove.setVisible(true);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void itemSelectedHandler(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_itemSelectedHandler
        // confirm that stockModel.size() is greater than 0
        // and index selected is not -1
        if (stockModel.size() > 0) {
            int index = listStocks.getSelectedIndex();
            if (index > -1) {
                Stock stock = (Stock) stockModel.getElementAt(index);
                double infoAmount = stock.calcResults();

                if (infoAmount > 0) {
                    txtStockInfo.setText("Gain of $" + String.format("%.2f",infoAmount));
                } else if (infoAmount < 0) {
                    txtStockInfo.setText("Loss of -$" + String.format("%.2f",Math.abs(infoAmount)));
                } else {
                    txtStockInfo.setText("No gain or loss.");
                }
            }
        }
    }//GEN-LAST:event_itemSelectedHandler

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // Get stock selected, validate to see if item is selected, and remove from stockModel
        int index = listStocks.getSelectedIndex();
        if (index < 0 || index > stockModel.size()) {
            if (index < 0) {
                JOptionPane.showMessageDialog(this, "Must select Stock to remove.");
            }
        } else {
            stockModel.removeElementAt(index);
        }
        
        // Set btnRemove visibility to false if there are no more stocks to remove.
        if (stockModel.size() == 0) {
            btnRemove.setVisible(false);
        }
        
        // clear stock info text
        txtStockInfo.setText("");
    }//GEN-LAST:event_btnRemoveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PortfolioManagementGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PortfolioManagementGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PortfolioManagementGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PortfolioManagementGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PortfolioManagementGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnRemove;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCurrent;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPurchase;
    private javax.swing.JLabel lblQty;
    private javax.swing.JList<Stock> listStocks;
    private javax.swing.JPanel pnlAdd;
    private javax.swing.JPanel pnlList;
    private javax.swing.JTabbedPane tbpManage;
    private javax.swing.JTextField txtCurrent;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPurchase;
    private javax.swing.JTextField txtQty;
    private javax.swing.JLabel txtStockInfo;
    // End of variables declaration//GEN-END:variables


}
